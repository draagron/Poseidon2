; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs =
	esp32dev


[env]
framework = arduino
lib_ldf_mode = deep
;upload_port = /dev/cu.usbserial-569C0158981
monitor_speed = 115200
upload_speed = 460800
upload_flags =
    --before=default_reset
    --after=hard_reset
lib_deps =
	mairas/ReactESP@^2.0.0
	https://github.com/ESP32Async/ESPAsyncWebServer
	https://github.com/ttlappalainen/NMEA2000
	https://github.com/ttlappalainen/NMEA0183.git
	ttlappalainen/NMEA2000_esp32
	Adafruit SSD1306
	bblanchon/ArduinoJson@^6.21.0
	paulstoffregen/OneWire@^2.3.8
	milesburton/DallasTemperature@^3.11.0

[espressif32_base]
platform = espressif32
build_unflags = -Werror=reorder
board_build.partitions = min_spiffs.csv
board_build.filesystem = littlefs
monitor_filters = esp32_exception_decoder

[env:esp32dev]
extends = espressif32_base
board = esp32dev
build_flags =
	-D LED_BUILTIN=2
	-D MAX_SOURCES=50
	-D SOURCE_STALE_THRESHOLD_MS=5000
	-D SOURCE_GC_THRESHOLD_MS=300000
	-D WEBSOCKET_UPDATE_INTERVAL_MS=500
build_src_filter =
	+<*>
	-<helpers/>






[env:esp32dev_test]
extends = espressif32_base
board = esp32dev
build_flags =
	-D LED_BUILTIN=2
	-D UNIT_TEST
build_src_filter =
	+<*>
	-<helpers/>
; Build all source files for tests
test_build_src = yes

[env:native]
platform = native
build_flags =
	-std=c++14
	-D UNIT_TEST
test_framework = unity
; Override framework from [env] section - native platform doesn't use Arduino
framework =
; Override lib_deps - native tests don't use Arduino libraries
lib_deps =

; ============================================================================
; Test Organization (Grouped by Feature)
; ============================================================================
; Tests are organized into groups using test_ prefix directories.
; Each group contains a test_main.cpp that runs all tests in that group.
;
; BoatData Tests:
;   - test_boatdata_contracts    : HAL interface contract tests
;   - test_boatdata_integration  : Full integration scenarios (7 scenarios)
;   - test_boatdata_units        : Formula and utility unit tests
;
; WiFi Tests:
;   - test_wifi_integration      : WiFi connection scenarios
;   - test_wifi_units            : WiFi component unit tests
;   - test_wifi_endpoints        : HTTP API endpoint tests
;
; Hardware Tests:
;   - test_wifi_connection       : WiFi hardware validation (ESP32 required)
;   - test_boatdata_timing       : 200ms calculation cycle (ESP32 required)
;
; Usage Examples:
;   pio test -e native                          # Run all native tests
;   pio test -e native -f test_boatdata_*       # Run all BoatData tests
;   pio test -e native -f test_wifi_*           # Run all WiFi tests
;   pio test -e native -f test_*_contracts      # Run all contract tests
;   pio test -e native -f test_*_integration    # Run all integration tests
;   pio test -e native -f test_*_units          # Run all unit tests
;   pio test -e native -f test_boatdata_contracts  # Run specific test group
; ============================================================================
